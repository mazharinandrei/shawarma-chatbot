from telebot import types
from db import BotDB


db = BotDB('db.db')

remove_keyboard = types.ReplyKeyboardRemove()

main_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_markup.add(types.KeyboardButton("üìÑ –ú–µ–Ω—é"),
                types.KeyboardButton("üç± –ö–æ—Ä–∑–∏–Ω–∞"))

cart_markup = types.InlineKeyboardMarkup(row_width=2)
cart_markup.add(types.InlineKeyboardButton("‚úî –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="place_order"))
cart_markup.add(types.InlineKeyboardButton("üó£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="operator"))
cart_markup.add(types.InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="change_order"))

pay_markup = types.InlineKeyboardMarkup(row_width=2)
pay_markup.add(types.InlineKeyboardButton("üí∏ –ù–∞–ª–∏—á–Ω—ã–º–∏", callback_data="cash"))
pay_markup.add(types.InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É", callback_data="card"))


def get_delivered_markup(user_id):
    delivered_markup = types.InlineKeyboardMarkup(row_width=2)
    delivered_markup.add(types.InlineKeyboardButton("–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"end_order_{user_id}"))
    return delivered_markup

def delete_markup(cart):
    delete_markup = types.InlineKeyboardMarkup(row_width=2)
    for i in range(len(cart)):
        delete_markup.add(types.InlineKeyboardButton(f"{cart[i][0]} {cart[i][1]}{cart[i][2]} - {cart[i][3]}‚ÇΩ", callback_data="delete_"+str(i)))
    delete_markup.add(types.InlineKeyboardButton("‚úî –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="place_order"))
    delete_markup.add(types.InlineKeyboardButton("üó£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="operator"))
    return delete_markup

def get_menu_markup():
    markup = types.InlineKeyboardMarkup(row_width=2)  # –ú–µ–Ω—é
    categories = db.get_categories()
    for category in categories:
        markup.add(types.InlineKeyboardButton(category[0], callback_data=category[1]))
    markup.add(types.InlineKeyboardButton("‚ÅâÔ∏è –Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –∑–∞–∫–∞–∑–∞—Ç—å", callback_data="help"))
    return markup


def get_subcategory_markup(callback):
    markup = types.InlineKeyboardMarkup(row_width=1)
    categories = db.get_tastes(callback)
    for category in categories:
        markup.add(types.InlineKeyboardButton(category[0], callback_data=category[1]))
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    return markup


def get_food_markup(callback):
    food = db.get_food_info(callback)
    markup = types.InlineKeyboardMarkup(row_width=len(food))
    for item in food:
        markup.add(types.InlineKeyboardButton(f"{item[2]} {item[3]} - {item[1]}‚ÇΩ", callback_data=str(item[4])+"/"+ str(item[2])))
    food_category = db.get_category_of_food(callback)
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_" + str(food_category)))
    return markup

def get_random_food_markup(callback):
    food = db.get_food_info(callback)
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="previous_food"),
               types.InlineKeyboardButton("‚ñ∂Ô∏è  –î–∞–ª—å—à–µ", callback_data="next_food"))
    for item in food:
        markup.add(types.InlineKeyboardButton(f"{item[2]} {item[3]} - {item[1]}‚ÇΩ", callback_data=str(item[4])+"/"+ str(item[2])))
    return markup


phone_button = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
phone_button.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True))


address_check_markup = types.InlineKeyboardMarkup()
address_check_markup.add(types.InlineKeyboardButton("–í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="yes"),
                         types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="no"))
