import telebot  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –±–æ—Ç–∞
import config  # –≤ –∫–æ–Ω—Ñ–∏–≥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω–µ–π—à–∏–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
import keyboards  # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
from db import BotDB
from random import shuffle

bot = telebot.TeleBot(config.token)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
db = BotDB('db.db')

i = 0


@bot.message_handler(commands=['start'])
def hello(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                     reply_markup=keyboards.phone_button)  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –ø—Ä–æ—Å–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º
    # —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏
    bot.register_next_step_handler(message, contact)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ contact


def contact(message):
    if message.contact is not None:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç, –∞ –Ω–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        if db.check_phone_number(message.contact.phone_number) is not None:
            bot.send_message(message.chat.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.chat.first_name}!\n"
                                              f"–í–∞—à –∞–¥—Ä–µ—Å: {db.get_user_address(message.from_user.id)}\n")

            bot.send_message(message.chat.id, f"–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=keyboards.address_check_markup)
        else:
            db.add_new_user(user_id=message.from_user.id,
                            first_name=message.from_user.first_name,
                            last_name=message.from_user.last_name,
                            phone_number=message.contact.phone_number)

            bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                             reply_markup=keyboards.remove_keyboard)
            bot.register_next_step_handler(message, input_address)

    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
                                          "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω\" ")
        bot.register_next_step_handler(message, contact)  # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏


def input_address(message):
    db.set_address(message.from_user.id, message.text)
    bot.send_message(message.chat.id, "–í–∞—à –∞–¥—Ä–µ—Å: " + message.text, reply_markup=keyboards.remove_keyboard)
    bot.send_message(message.chat.id, "–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=keyboards.address_check_markup)


@bot.callback_query_handler(func=lambda call: call.data == 'yes')
def address_check(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.send_message(call.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–∫–∞–∑—É.",
                     reply_markup=keyboards.main_markup)


@bot.callback_query_handler(func=lambda call: call.data == 'no')
def address_check(call):
    bot.send_message(call.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
    bot.register_next_step_handler(call.message, input_address)


@bot.message_handler(content_types=['text'])
def navigation(message):
    if message.text == "üìÑ –ú–µ–Ω—é":
        menu_markup = keyboards.get_menu_markup()
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=menu_markup)
    elif message.text == "üç± –ö–æ—Ä–∑–∏–Ω–∞":
        cart = db.get_user_cart(message.chat.id)
        msg = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ:"
        cost = 0
        for item in cart:
            msg += f"\n{item[0]} {item[1]} {item[2]} - {item[3]}‚ÇΩ"
            cost += float(item[3])
        bot.send_message(message.chat.id,
                         msg + "\n–ò—Ç–æ–≥–æ: " + str(cost) + "‚ÇΩ",
                         reply_markup=keyboards.cart_markup)  # –î–æ–ª–∂–Ω–∞ –±—Ä–∞—Ç—å—Å—è –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î


@bot.callback_query_handler(func=lambda call: call.data == "help")
def help(call):
    global all_food
    all_food = db.get_all_food()
    shuffle(all_food)
    food = all_food[0]
    food_info = db.get_food_info(callback=food[3])[0]
    bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id - 1)
    bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    with open('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/' + str(food_info[6]), "rb") as photo:
        bot.send_photo(chat_id=call.from_user.id, photo=photo, caption=f"{food_info[0]}\n\n{food_info[5]}",
                       reply_markup=keyboards.get_random_food_markup(food[3]))


@bot.callback_query_handler(func=lambda call: call.data in ["previous_food", "next_food"])
def back(call):
    global i
    if call.data == "previous_food":
        i -= 1
    if call.data == "next_food":
        i += 1
    try:
        food = all_food[i]
    except:
        food = all_food[0]
    food_info = db.get_food_info(callback=food[3])[0]
    with open('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/' + str(food_info[6]), "rb") as photo:
        bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        bot.send_photo(chat_id=call.from_user.id, photo=photo, caption=f"{food_info[0]}\n\n{food_info[5]}",
                       reply_markup=keyboards.get_random_food_markup(food[3]))


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
def back(call):
    markup = keyboards.get_menu_markup()
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: 'back_to_' in call.data)
def back(call):
    category = call.data[8:]
    markup = keyboards.get_subcategory_markup(category)
    bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    bot.send_message(chat_id=call.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in db.get_category_callbacks())
def send_subcategory(call):
    markup = keyboards.get_subcategory_markup(call.data)
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in db.get_food_callbacks())
def send_food(call):
    bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    markup = keyboards.get_food_markup(call.data)
    food_info = db.get_food_info(call.data)[0]
    with open('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏/' + str(food_info[6]), "rb") as photo:
        bot.send_photo(chat_id=call.from_user.id, photo=photo, caption=f"{food_info[0]}\n\n{food_info[5]}",
                       reply_markup=markup)


comment = ""


@bot.callback_query_handler(func=lambda call: "/" in call.data)
def bjhg(call):
    order_info = call.data.split('/')
    name = order_info[0]
    food_info = db.get_food_info(name)[0]
    count = order_info[1]
    item = (food_info[0], food_info[2], food_info[3], food_info[1])
    db.add_to_cart(user_id=call.from_user.id, name=name, count=count)
    bot.send_message(call.from_user.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:\n{item[0]} {item[1]} {item[2]} - {item[3]}‚ÇΩ\n")


@bot.callback_query_handler(func=lambda call: call.data == 'place_order')
def back(call):
    bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    bot.send_message(call.from_user.id, "–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ",
                     reply_markup=keyboards.pay_markup)


@bot.callback_query_handler(func=lambda call: call.data == 'operator')
def back(call):
    bot.send_message(call.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: ")
    bot.register_next_step_handler(call.message, operator)


def operator(message):
    global comment
    comment += message.text
    cart = db.get_user_cart(message.chat.id)
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!",
                     reply_markup=keyboards.delete_markup(cart))


@bot.callback_query_handler(func=lambda call: "delete_" in call.data)
def back(call):
    cart = db.get_user_cart(call.from_user.id)
    item = int(call.data.split("_")[1])  # –ö–∞–∫–æ–π –ø–æ —Å—á—ë—Ç—É —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
    db.delete_from_cart(user_id=call.from_user.id, callback_data=cart[item][4], weight=cart[item][1])  # float
    bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    cart.pop(item)  # –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ cart –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É, —á—Ç–æ–±—ã –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–µ –ª–µ–∑—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
    bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:",
                     reply_markup=keyboards.delete_markup(cart))


@bot.callback_query_handler(func=lambda call: call.data == 'change_order')
def back(call):
    cart = db.get_user_cart(call.from_user.id)
    bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboards.delete_markup(cart))


@bot.callback_query_handler(func=lambda call: 'end_order_' in call.data)
def end_order(call):
    user_id = call.data.split('_')[2]
    db.clear_cart(user_id)
    message = call.message.text.replace('–ù–æ–≤—ã–π', '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π')
    bot.edit_message_text(chat_id=config.admin, message_id=call.message.message_id,
                          text=message)
    bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!")


@bot.callback_query_handler(func=lambda call: call.data in ["cash", "card"])
def end_of_order(call):
    bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    bot.send_message(call.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ –ø—Ä–∏–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 40 –º–∏–Ω—É—Ç!")
    msg = "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ1:\n"
    cart = db.get_user_cart(call.from_user.id)
    cost = 0
    for item in cart:
        msg += f"\n{item[0]} {item[1]} {item[2]} - {item[3]}‚ÇΩ"
        cost += float(item[3])
    msg += f"\n\n–ê–¥—Ä–µ—Å: {db.get_user_address(call.from_user.id)}"
    if call.data == "cash":
        msg += "\n\n–û–ø–ª–∞—Ç–∞: –Ω–∞–ª–∏—á–Ω—ã–º–∏"
    else:
        msg += "\n\n–û–ø–ª–∞—Ç–∞: –ø–æ –∫–∞—Ä—Ç–µ"
    global comment
    if comment != "":
        msg += f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{comment}"
    bot.send_message(config.admin, msg, reply_markup=keyboards.get_delivered_markup(call.from_user.id))


if __name__ == '__main__':
    bot.polling()
